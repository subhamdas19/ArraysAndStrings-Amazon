INDESCENDING ORDER
Sort elements by their frequency and index

import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
 
class Data implements Comparable<Data>
{
    int value, count, index;
 
    public Data(int value, int count, int index)
    {
        this.value = value;
        this.count = count;
        this.index = index;
    }
 
    public int compareTo(Data obj)
    {
        // If two elements have different frequencies, then
        // the one which has more frequency should come first
        if (this.count != obj.count) {
            return obj.count - this.count;
        }
 
        // If two elements have the same frequencies, then the
        // one which has less index should come first
        return this.index - obj.index;
    }
}
 
class Main
{
    // Custom sort by element's frequency and index
    public static void sortByFrequencyAndIndex(int[] arr)
    {
        if (arr == null || arr.length < 2) {
            return;
        }
 
        // insert frequency of each array element into the map
        // and index of its first occurrence in the array
        Map<Integer, Data> hm = new HashMap<>();
        for (int i = 0; i < arr.length; i++)
        {
            hm.putIfAbsent(arr[i], new Data(arr[i], 0, i));
            hm.get(arr[i]).count++;
        }
 
        // sort the values based on a custom comparator
        List<Data> values = hm.values().stream()
                .sorted()
                .collect(Collectors.toList());
 
        int k = 0;
        for (Data data: values)
        {
            for (int j = 0; j < data.count; j++) {
                arr[k++] = data.value;
            }
        }
    }
 
    public static void main(String[] args)
    {
        int[] arr = { 3, 3, 1, 1, 1, 8, 3, 6, 8, 7, 8 };
 
        sortByFrequencyAndIndex(arr);
        System.out.println(Arrays.toString(arr));
    }
}
























#include<iostream>
using namespace std;
#include <bits/stdc++.h> 
using namespace std; 
  
// Map m2 keeps track of indexes of elements in array 
 
unordered_map<int, int> m2; 
// Used for sorting by frequency. And if frequency is same, 
// then by appearance 
bool sortByVal(const pair<int, int>& a, const pair<int, int>& b) 
{ 
    // If frequency is same then sort by index 
    if (a.second == b.second)  
        return m2[a.first] < m2[b.first]; 
      
    return a.second > b.second; 
} 
  
// function to sort elements by frequency 
void sortByFreq(int a[], int n) 
{ 
    unordered_map<int, int> m; 
    vector<pair<int, int> > v; 
    
    for (int i = 0; i < n; ++i) { 
  
        // Map m is used to keep track of count  
        // of elements in array 
        m[a[i]]++; 
  
        // Update the value of map m2 only once 
        if (m2[a[i]] == 0)  
            m2[a[i]] = i + 1;         
    } 
  
    // Copy map to vector 
    copy(m.begin(), m.end(), back_inserter(v)); 
  
    // Sort the element of array by frequency 
    sort(v.begin(), v.end(), sortByVal); 
  
    for (auto it=v.begin();it!=v.end();it++)  
        for (int j = 0; j < it->second; ++j)  
            cout << it->first << " ";  
} 
  
// Driver program 
int main() 
{ 
    int a[] = { 2, 5, 2, 6, -1, 9999999, 5, 8, 8, 8 }; 
    int n = sizeof(a) / sizeof(a[0]); 
  
    sortByFreq(a, n); 
  
    return 0; 
} 



Time Complexity : O(n) + O(m Log m) where n is total number of elements and m is total number of distinct elements
