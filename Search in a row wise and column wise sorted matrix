
// JAVA Code for Search in a row wise and
// column wise sorted matrix

class GFG {

	/* Searches the element x in mat[][]. If the
	element is found, then prints its position
	and returns true, otherwise prints "not found"
	and returns false */
	private static void search(int[][] mat,
									int n, int x)
	{
		
		// set indexes for top right
		int i = 0, j = n - 1;
		// element

		while (i < n && j >= 0)
		{
			if (mat[i][j] == x)
			{
				System.out.print("n Found at " +
									i + " " + j);
				return;
			}
			if (mat[i][j] > x)
				j--;
			else // if mat[i][j] < x
				i++;
		}

		System.out.print("n Element not found");
		return; // if ( i==n || j== -1 )
	}
	// driver program to test above function
	public static void main(String[] args)
	{
		int mat[][] = { { 10, 20, 30, 40 },
						{ 15, 25, 35, 45 },
						{ 27, 29, 37, 48 },
						{ 32, 33, 39, 50 } };

		search(mat, 4, 29);
	}
}
// This code is contributed by Arnav Kr. Mandal.





Search in a row wise and column wise sorted matrix
#include <bits/stdc++.h> 
  
using namespace std; 
  
/* Searches the element x in mat[][]. If the  
element is found, then prints its position  
and returns true, otherwise prints "not found" 
and returns false */
int search(int mat[4][4], int n, int x) 
{ 
    if (n == 0) 
        return -1; 
    int smallest = a[0][0], largest = a[n - 1][n - 1]; 
    if (x < smallest || x > largest) 
        return -1; 
    // set indexes for top right element 
    int i = 0, j = n - 1;  
    while (i < n && j >= 0) { 
        if (mat[i][j] == x) { 
            cout << "n Found at "
                 << i << ", " << j; 
            return 1; 
        } 
        if (mat[i][j] > x) 
            j--; 
        else // if mat[i][j] < x 
            i++; 
    } 
  
    cout << "n Element not found"; 
    return 0; // if ( i==n || j== -1 ) 
} 
  
// Driver code 
int main() 
{ 
    int mat[4][4] = { { 10, 20, 30, 40 }, 
                      { 15, 25, 35, 45 }, 
                      { 27, 29, 37, 48 }, 
                      { 32, 33, 39, 50 } }; 
    search(mat, 4, 29); 
  
    return 0; 
} 
  
// This code is contributed 
// by Akanksha Rai(Abby_akku) 
Output :

Found at 2, 1
Time Complexity: O(n)

The above approach will also work for m x n matrix (not only for n x n). Complexity would be O(m + n).
