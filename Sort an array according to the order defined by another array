
import java.util.Arrays;
import java.util.Map;
import java.util.TreeMap;
 
class Main
{
    public static void customSort(int[] first, int[] second)
    {
        // map to store the frequency of each element of the first array
        Map<Integer, Integer> freq = new TreeMap<>();
 
        // find the frequency of each element of the first array and
        // store it in a map
        for (int i: first) {
            freq.put(i, freq.getOrDefault(i, 0) + 1);
        }
 
        // Note that once we have the frequencies of all elements of
        // the first array, we can overwrite elements of the first array
 
        int index = 0;
 
        // do for every element of the second array
        for (int i: second)
        {
            // If the current element is present on the map, print it `n` times
            // where `n` is the frequency of that element in the first array
            int n = freq.getOrDefault(i, 0);
            while (n-- > 0) {
                first[index++] = i;
            }
 
            // erase the element from the map
            freq.remove(i);
        }
 
        // Now we are left with elements only present in the first array,
        // but not in the second array.
 
        // Sort the remaining elements present on the map (Note that the keys are
        // already sorted since we are using `TreeMap`)
 
        for (var entry: freq.entrySet())
        {
            int count = entry.getValue();
            while (count-- > 0) {
                first[index++] = entry.getKey();
            }
        }
    }
 
    public static void main(String[] args)
    {
        int[] first = { 5, 8, 9, 3, 5, 7, 1, 3, 4, 9, 3, 5, 1, 8, 4 };
        int[] second = { 3, 5, 7, 2 };
 
        customSort(first, second);
        System.out.println("The array after sorting is " + Arrays.toString(first));
    }
}







https://www.faceprep.in/sort-an-array-according-to-the-order-defined-by-another-array/


Input the array 1 and array 2 elements.

Count the frequency of all the elements of array 1 and store it in a map.
Now, for each element of array 2, check if the element is found in the map.
If it is present, print the number k times, where k is the frequency of appearance of the element.
After printing, remove the element from the map.
After all the array 2 elements have been traversed, sort the remaining elements and print them.
Program to sort elements according to the order specified by another array using hashing is given below.

C++
// C++ program to sort an array according to the order specified by another array using hashing

#include <bits/stdc++.h>
using namespace std;

void customSort(int arr1[], int arr2[], int m, int n)
{
// map to store frequency of each element of first array 
unordered_map<int, int> freq;

for (int i = 0; i < m; i++) 
freq[arr1[i]]++;

int index = 0;
// do for every element of second array
for (int i = 0; i < n; i++) 
{
// If current element is present in the map, print it n times 
while (freq[arr2[i]]) 
{
arr1[index++] = arr2[i];
freq[arr2[i]]–;
}
// delete the element from map
freq.erase(arr2[i]);
}

// sort the remaining elements present in the map
int i = index;
for (auto it = freq.begin(); it != freq.end(); ++it)
while (it->second–)
arr1[index++] = (it->first);

// sort the remaining elements
sort(arr1 + i, arr1 + index);
}

// main function
int main()
{
int arr1[] = { 1, 2, 3, 4, 3, 1, 2, 5, 7};
int arr2[] = { 3, 2, 4, 1};

int m = sizeof(arr1) / sizeof(arr1[0]);
int n = sizeof(arr2) / sizeof(arr2[0]);

customSort(arr1, arr2, m, n);

cout << “After sorting the array is : “;
for (int i = 0; i < m; i++)
cout << arr1[i] << ” “;
cout << endl;

return 0;
}


Time complexity: O(mlogm + n)
