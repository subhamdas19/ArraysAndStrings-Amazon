

https://www.geeksforgeeks.org/sliding-window-maximum-maximum-of-all-subarrays-of-size-k/


// JAVA program to delete a node from AVL Tree
import java.io.*;
import java.util.*;

class GFG {

	static ArrayList<Integer> findKMaxElement(int[] arr,
											int k, int n)
	{
		// creating the max heap ,to get max element always
		PriorityQueue<Integer> queue = new PriorityQueue<>(
			Collections.reverseOrder());

		ArrayList<Integer> res = new ArrayList<>();
		int i = 0;

		for (; i < k; i++)
			queue.add(arr[i]);

		// adding the maximum element among first k elements
		res.add(queue.peek());

		// removing the first element of the array
		queue.remove(arr[0]);

		// iterarting for the next elements
		for (; i < n; i++) {

			// adding the new element in the window
			queue.add(arr[i]);

			// finding & adding the max element in the
			// current sliding window
			res.add(queue.peek());

			// finally removing the first element from front
			// end of queue
			queue.remove(arr[i - k + 1]);
		}

		return res;

		// this code is Contributed by Pradeep Mondal P
	}

	// Driver Code
	public static void main(String[] args)
	{
		int arr[] = { 8, 5, 10, 7, 9, 4, 15, 12, 90, 13 };
		int k = 4, n = arr.length;

		List<Integer> res = findKMaxElement(arr, k, n);
		for (int x : res)
			System.out.print(x + " ");
	}
}
























https://www.youtube.com/watch?v=J6o_Wz-UGvc
class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        int n=nums.size();
        //Check for Empty Input
        if(n==0 || n<k){
            return {};
        }
        //Here using double ended queue with atmost size equal to k
        deque<int> q;
        //Result Array Storing the output with size of (n-k+1)
        vector<int> ans(n-k+1);
        for(int i=0;i<n;i++){
            /* Here Idea is that to remove all smaller elements that comes before any
                larger element in present window.
                Here, We are not removing any smaller element that comes after larger element
				because it may become larger element for another window.
            */
            while(!q.empty() && nums[q.back()]<=nums[i]){
                q.pop_back();
            }
            // pushing new elements in queue
            q.push_back(i);
            //Storing Maximum element in result
            if(i>=k-1){
                // Here Always larger element will on the front of queue
                ans[i-k+1]=nums[q.front()];
                // if any element is out of the context of current window, remove it
                if(q.front()==i-k+1){
                    q.pop_front();
                }
            }
        }
        return ans;
        
    }
};
