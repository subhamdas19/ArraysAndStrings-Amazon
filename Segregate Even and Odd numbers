// Java program for the above approach

Time Complexity: O(N) 

Space Complexity: O(1)


import java.util.*;
Alternate Implementation:

    Using two pointers i and j , i will point index 0 and j will point the last index.
    Run a while loop; if a[i] is odd and a[j] is even then we will swap them else we will decrement j.
    
    
class GFG{

// Function to segregate
static void segregate(int a[], int n)
{
	int i = 0, j = (n - 1);

	// Iterate while j >= i
	while (j >= i)
	{
		
		// Check is a[i] is even
		// or odd
		if (a[i] % 2 != 0)
		{
			if (a[j] % 2 == 0)
			{
				
				// Swap a[i] and a[j]
				a = swap(a, i, j);
				i++;
				j--;
			}
			else
				j--;
		}
		else
			i++;
	}

	for(i = 0; i < n; i++)
		System.out.print(a[i] + " ");
}

static int[] swap(int []arr, int i, int j)
{
	int temp = arr[i];
	arr[i] = arr[j];
	arr[j] = temp;
	return arr;
}

// Driver Code
public static void main(String[] args)
{
	int a[] = { 1, 2, 3, 4, 5, 6 };
	int n = a.length;

	// Function Call
	segregate(a, n);
}
}

// This code is contributed by 29AjayKumar






Alternate Implementation (Lomuto partition): 
filter_none
edit
play_arrow

brightness_4
// A Lomuto partition based scheme to segregate 
// even and odd numbers. 
#include <iostream> 
using namespace std; 
  
// function to rearrange the array in given way. 
void rearrangeEvenAndOdd(int arr[], int n) 
{ 
    // variables 
    int j = -1; 
  
    // quick sort method 
    for (int i = 0; i < n; i++) { 
  
        // if array of element 
        // is odd then swap 
        if (arr[i] % 2 == 0) { 
  
            // increment j by one 
            j++; 
  
            // swap the element 
            swap(arr[i], arr[j]); 
        } 
    } 
} 
  
int main() 
{ 
    int arr[] = { 12, 10, 9, 45, 2, 10, 10, 45 }; 
    int n = sizeof(arr) / sizeof(arr[0]); 
  
    rearrangeEvenAndOdd(arr, n); 
  
    for (int i = 0; i < n; i++) 
        cout << arr[i] << " "; 
} 
// This code is contributed by devagarwalmnnit 
Output:

12 10 2 10 10 45 9 45
Time Complexity: O(n)
Auxillary Space: O(1)
